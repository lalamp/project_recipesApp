generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  username       String    @unique @default("")
  bio            String?   

  recipes        Recipe[]     @relation("UserRecipes")
  followers      User[]       @relation("UserFollowers")
  following      User[]       @relation("UserFollowers")
}

model Recipe {
  id             String       @id @default(cuid())
  idUser         String
  createdDate    DateTime     @default(now())
  rating         Float?       
  name           String
  description    String
  images         String[]     
  videos         String[]    
  time           Int          
  portions       Int          
  categories     String[]     
  calories       Float?
  carbohydrates  Float?
  proteins       Float?
  ingredients    IngredientOnRecipe[]

  user           User         @relation("UserRecipes", fields: [idUser], references: [id])
}
model Ingredient {
  id            String    @id @default(cuid())
  name          String
  quantity      Float
  unitMeasure   String
  recipes    IngredientOnRecipe[]
}

model IngredientOnRecipe {
  id            String     @id @default(cuid())
  recipeId      String
  ingredientId  String

  recipe        Recipe      @relation(fields: [recipeId], references: [id])
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])

  @@unique([recipeId, ingredientId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationRequest {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}